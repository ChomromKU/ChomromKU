generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Club {
  id                Int                 @id @default(autoincrement())
  name              String              @unique @db.VarChar(255)
  label             String              @db.VarChar(255)
  category          ClubCategory
  branch            KUBranch
  location          String              @db.VarChar(255)
  phoneNumber       String              @db.VarChar(10)
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  members           Member[]
  subscribers       User[]
  events            Event[]
  posts             Post[]
  socialMedia       SocialMedia?
  memberRequestForm MemberRequestForm[]

  @@map("clubs")
}

model SocialMedia {
  id        Int      @id @default(autoincrement())
  clubId    Int      @unique
  facebook  String   @db.VarChar(255)
  instagram String   @db.VarChar(255)
  line      String   @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  club      Club     @relation(fields: [clubId], references: [id])

  @@map("social_media")
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String    @db.VarChar(255)
  type      PostType
  content   String    @db.Text
  imageUrl  String    @db.Text
  approved  Boolean   @default(false)
  createdAt DateTime  @default(now()) @map("created_at")
  // updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  clubId    Int
  ownerId   Int
  likes     Like[]
  comments  Comment[]
  club      Club      @relation(fields: [clubId], references: [id])
  owner     User      @relation(fields: [ownerId], references: [id])

  @@index([clubId])
  @@index([ownerId])
  @@map("posts")
}

model Event {
  id        Int         @id @default(autoincrement())
  title     String      @db.VarChar(255)
  content   String      @db.Text
  imageUrl  String      @db.Text
  location  String      @db.VarChar(255)
  startDate DateTime
  endDate   DateTime
  startTime String
  endTime   String
  status    EventStatus @default(OPEN)
  approved  Boolean     @default(false)
  createdAt DateTime    @default(now()) @map("created_at")
  // updatedAt DateTime    @default(now()) @updatedAt @map("updated_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  clubId    Int
  ownerId   Int
  followers User[]
  likes     Like[]
  comments  Comment[]
  club      Club        @relation(fields: [clubId], references: [id])
  owner     Member      @relation(fields: [ownerId], references: [id])

  @@index([clubId])
  @@index([ownerId])
  @@map("events")
}

model User {
  id                Int                @id @default(autoincrement())
  stdId             String             @unique
  titleTh           String
  titleEn           String
  firstNameTh       String
  lastNameTh        String
  firstNameEn       String
  lastNameEn        String
  campusNameTh      String
  campusNameEn      String
  member            Member?
  memberRequestForm MemberRequestForm?
  clubs             Club[]
  events            Event[]
  posts             Post[]
  likes             Like[]
  comments          Comment[]

  @@map("users")
}

model Member {
  id     Int     @id @default(autoincrement())
  role   Role    @default(NORMAL)
  userId Int     @unique
  clubId Int
  user   User    @relation(fields: [userId], references: [id])
  club   Club    @relation(fields: [clubId], references: [id])
  events Event[]

  @@index([clubId])
  @@map("members")
}

model MemberRequestForm {
  id          Int      @id @default(autoincrement())
  year        String
  faculty     String
  department  String
  email       String
  phoneNumber String   @db.VarChar(10)
  reason      String
  createdAt   DateTime @default(now()) @map("created_at")
  userId      Int      @unique
  clubId      Int      
  user        User     @relation(fields: [userId], references: [id])
  club        Club     @relation(fields: [clubId], references: [id])

  @@index([clubId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  message   String   @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  userId    Int
  postId    Int?
  eventId   Int?
  user      User     @relation(fields: [userId], references: [id])
  post      Post?    @relation(fields: [postId], references: [id])
  event     Event?   @relation(fields: [eventId], references: [id])

  @@index([userId])
  @@index([postId])
  @@index([eventId])
  @@map("comments")
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  userId    Int
  postId    Int?
  eventId   Int?
  user      User     @relation(fields: [userId], references: [id])
  post      Post?    @relation(fields: [postId], references: [id])
  event     Event?   @relation(fields: [eventId], references: [id])

  @@index([userId])
  @@index([postId])
  @@index([eventId])
  @@map("likes")
}

model ClubToUser {
  A Int
  B Int

  @@unique([A, B], map: "_ClubToUser_AB_unique")
  @@index([B], map: "_ClubToUser_B_index")
  @@map("_ClubToUser")
}

model EventToUser {
  A Int
  B Int

  @@unique([A, B], map: "_EventToUser_AB_unique")
  @@index([B], map: "_EventToUser_B_index")
  @@map("_EventToUser")
}

enum KUBranch {
  Bangkhen
  Sriracha
  KamphaengSaen
  SakonNakorn
}

enum ClubCategory {
  UnitOfActivitiesSupport
  UnitOfStudentOrganization
  UnitOfActivitiesForCharityAndAcademic
  UnitOfCulturalAndSportsActivities
  UnitOFCurriculumAndSpecialPrograms
}

enum PostType {
  NORMAL_POST
  QA
  NEWS
}

enum EventStatus {
  WAITING
  OPEN
  IN_PROGRESS
  CLOSED
}

enum Role {
  PRESIDENT
  VICE_PRESIDENT
  ADMIN
  NORMAL
}
